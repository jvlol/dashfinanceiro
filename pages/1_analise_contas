# pages/1_analise_contas.py

import streamlit as st
import pandas as pd
import plotly.express as px
import locale
import re

# --- Configura√ß√£o da P√°gina e Fun√ß√µes Auxiliares ---
st.set_page_config(layout="wide", page_title="Analise Contas") # Nome que aparecer√° no menu

try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')

def formatar_moeda(valor):
    try:
        return locale.currency(valor, grouping=True, symbol='R$')
    except (TypeError, ValueError): return "N/A"

def analisar_palavras_chave(df):
    palavras = [
        'uber', 'iptu', 'internet', 'multa', 's√≠tio', 'manuten√ß√£o', 'manutencao',
        'encargos', 'gasolina', 't√≠tulos', 'titulo', 'g√°s', 'juros', 'marketing',
        'frete', 'passagem', 'viagem', 'aluguel', 'condominio', 'telefone'
    ]
    resultados = {}
    for palavra in palavras:
        df_palavra = df[df['descricao'].str.contains(palavra, flags=re.IGNORECASE, regex=True, na=False)]
        if not df_palavra.empty:
            resultados[palavra.capitalize()] = {'Ocorr√™ncias': len(df_palavra), 'Valor Total': df_palavra['valor_pago'].sum()}
    if resultados:
        return pd.DataFrame.from_dict(resultados, orient='index').sort_values(by='Valor Total', ascending=False)
    return pd.DataFrame()

@st.cache_data
def carregar_dados(arquivo_enviado):
    try:
        df = pd.read_excel(arquivo_enviado, sheet_name='Contas pagas', header=2)
        indices = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11]
        df_selecionado = df.iloc[:, indices].copy()
        nomes = ['empresa', 'centro_de_custo', 'fornecedor', 'descricao', 'valor', 'valor_pago', 'juros', 'data_vencimento', 'data_pagamento', 'forma_pagamento']
        df_selecionado.columns = nomes
        for col in ['valor', 'valor_pago', 'juros']: df_selecionado[col] = pd.to_numeric(df_selecionado[col], errors='coerce').fillna(0)
        for col in ['data_vencimento', 'data_pagamento']: df_selecionado[col] = pd.to_datetime(df_selecionado[col], errors='coerce').dt.date
        return df_selecionado.dropna(subset=['empresa'])
    except Exception: return None

# --- In√≠cio da Interface da P√°gina ---
st.title("An√°lise Inteligente de Contas Pagas")
st.markdown("Mergulhe nos detalhes de suas despesas. Use os filtros para refinar os dados.")

uploaded_file = st.file_uploader("Fa√ßa o upload da sua planilha Excel (.xlsx)", type="xlsx", key="contas_pagas_uploader")

if uploaded_file:
    df_pagas = carregar_dados(uploaded_file)
    if df_pagas is not None:
        st.success("Planilha de Contas Pagas carregada com sucesso!")
        
        st.sidebar.header("Filtros")
        opcoes_empresa = ['TODAS'] + sorted(df_pagas['empresa'].unique().tolist())
        empresa_selecionada = st.sidebar.selectbox("Empresa:", opcoes_empresa)
        opcoes_custo = ['TODAS'] + sorted(df_pagas['centro_de_custo'].unique().tolist())
        centro_custo_selecionado = st.sidebar.selectbox("Centro de Custo:", opcoes_custo)
        
        df_filtrado = df_pagas.copy()
        if empresa_selecionada != 'TODAS': df_filtrado = df_filtrado[df_filtrado['empresa'] == empresa_selecionada]
        if centro_custo_selecionado != 'TODAS': df_filtrado = df_filtrado[df_filtrado['centro_de_custo'] == centro_custo_selecionado]

        st.header(f"Resultados para: {empresa_selecionada} | {centro_custo_selecionado}")
        
        if not df_filtrado.empty:
            total_pago, num_transacoes, ticket_medio = df_filtrado['valor_pago'].sum(), len(df_filtrado), df_filtrado['valor_pago'].mean()
            kpi1, kpi2, kpi3 = st.columns(3)
            kpi1.metric("Valor Total Pago", formatar_moeda(total_pago))
            kpi2.metric("N¬∫ de Transa√ß√µes", f"{num_transacoes:,}")
            kpi3.metric("Ticket M√©dio", formatar_moeda(ticket_medio))

            st.markdown("---")
            st.subheader("üìà Evolu√ß√£o dos Gastos Di√°rios")
            gastos_diarios = df_filtrado.groupby('data_pagamento')['valor_pago'].sum()
            st.line_chart(gastos_diarios)

            st.markdown("---")
            st.header("An√°lises Detalhadas dos Gastos")
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("üí° Top Gastos por Palavra-Chave")
                df_palavras = analisar_palavras_chave(df_filtrado)
                if not df_palavras.empty:
                    df_palavras['Valor Total'] = df_palavras['Valor Total'].apply(formatar_moeda)
                    st.dataframe(df_palavras)
            with col2:
                st.subheader("üë• Top 10 Fornecedores por Valor")
                top_fornecedores = df_filtrado.groupby('fornecedor').agg(valor_pago_total=('valor_pago', 'sum'), ocorrencias=('valor_pago', 'count')).nlargest(10, 'valor_pago_total')
                top_fornecedores['valor_pago_total'] = top_fornecedores['valor_pago_total'].apply(formatar_moeda)
                st.dataframe(top_fornecedores)

            st.markdown("---")
            st.subheader("Vis√£o Geral em Gr√°ficos")
            g_col1, g_col2 = st.columns(2)
            with g_col1:
                gastos_por_custo = df_filtrado.groupby('centro_de_custo')['valor_pago'].sum().nlargest(10).sort_values(ascending=False)
                st.bar_chart(gastos_por_custo)
            with g_col2:
                gastos_por_forma = df_filtrado.groupby('forma_pagamento')['valor_pago'].sum()
                fig_forma = px.pie(gastos_por_forma, values='valor_pago', names=gastos_por_forma.index, hole=.3)
                st.plotly_chart(fig_forma, use_container_width=True)
        else:
            st.warning("Nenhum dado encontrado para os filtros selecionados.")
    else:
        st.error("N√£o foi poss√≠vel carregar os dados. Verifique se o arquivo cont√©m a aba 'Contas pagas'.")
else:
    st.info("Para iniciar, fa√ßa o upload da sua planilha de Contas Pagas.")